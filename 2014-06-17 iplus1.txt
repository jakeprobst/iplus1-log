id: 66
date: 2014-06-17
pos: 0
title: iplus1

ok so redis format idea two:

HSET <lang> <id> <tokens>
tokens being <token 1>,<token 2>,<token 3>

HSET <tlang>-<nlang> <id> <tid>

ok so ankidata is all loaded up tokenized for words and now we ask redis for ids of all sentences of the target lang that have native lang translations
iterate over list of sentences -> get tokens based on id -> check tokens against list of words from anki deck -> find sentences with one new -> save tid -> return list of tids to server for it to look up and send to user.

as an optimization, <tlang>-<nlang> and <nlang>-<tlang> would both exist and be the same thing mostly.
sort it alphabetically so that the pair will have one list total and make a note which side is needed to look up the translation we need.
also makes it easier to send data as a pair will just need to be sent once (current links.csv has all links both ways).



and for protocol:
LINK\t<lang code>\t<id>\t<lang code>\t<id>



tried some memory optimization (from http://redis.io/topics/memory-optimization):
hash-max-ziplist-entries 500000
hash-max-ziplist-value 1024

there are a handful of sentences that go over 512, otherwise I would use that as the -value.
might just filter them out since they are unlikely to show up when i+1ing anyway.

memory usage: 90mb
time to process: 166minutes

it is only a onetime init, so that time is acceptable, I guess.
the memory usage is quite nice though.

Optimizations for the links can be made, will work on that next.

note on filtering out sentences longer than 512: no effect